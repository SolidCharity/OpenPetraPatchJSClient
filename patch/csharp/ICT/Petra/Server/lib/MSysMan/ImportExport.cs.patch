--- openpetra.js.before/csharp/ICT/Petra/Server/lib/MSysMan/ImportExport.cs	2014-08-29 15:39:26.000000000 +0200
+++ openpetra.js/csharp/ICT/Petra/Server/lib/MSysMan/ImportExport.cs	2014-08-29 15:37:59.000000000 +0200
@@ -239,7 +239,17 @@
         {
             List <string>tables = TTableList.GetDBNames();
 
-            TProgressTracker.InitProgressTracker(DomainManager.GClientID.ToString(),
+            string ClientID = "ClientID";
+
+            try
+            {
+                ClientID = DomainManager.GClientID.ToString();
+            }
+            catch (Exception)
+            {
+            }
+
+            TProgressTracker.InitProgressTracker(ClientID,
                 Catalog.GetString("Importing database"),
                 tables.Count + 3);
 
@@ -249,7 +259,7 @@
             {
                 tables.Reverse();
 
-                TProgressTracker.SetCurrentState(DomainManager.GClientID.ToString(),
+                TProgressTracker.SetCurrentState(ClientID,
                     Catalog.GetString("deleting current data"),
                     0);
 
@@ -258,7 +268,7 @@
                     DBAccess.GDBAccessObj.ExecuteNonQuery("DELETE FROM pub_" + table, Transaction);
                 }
 
-                if (TProgressTracker.GetCurrentState(DomainManager.GClientID.ToString()).CancelJob == true)
+                if (TProgressTracker.GetCurrentState(ClientID).CancelJob == true)
                 {
                     DBAccess.GDBAccessObj.RollbackTransaction();
                     return false;
@@ -270,7 +280,7 @@
 
                 tables.Reverse();
 
-                TProgressTracker.SetCurrentState(DomainManager.GClientID.ToString(),
+                TProgressTracker.SetCurrentState(ClientID,
                     Catalog.GetString("loading initial tables"),
                     1);
 
@@ -294,7 +304,7 @@
                     return false;
                 }
 
-                if (TProgressTracker.GetCurrentState(DomainManager.GClientID.ToString()).CancelJob == true)
+                if (TProgressTracker.GetCurrentState(ClientID).CancelJob == true)
                 {
                     DBAccess.GDBAccessObj.RollbackTransaction();
                     return false;
@@ -316,13 +326,13 @@
 
                 foreach (string table in tables)
                 {
-                    TProgressTracker.SetCurrentState(DomainManager.GClientID.ToString(),
+                    TProgressTracker.SetCurrentState(ClientID,
                         String.Format(Catalog.GetString("loading table {0}"), table),
                         tableCounter);
 
                     tableCounter++;
 
-                    if (TProgressTracker.GetCurrentState(DomainManager.GClientID.ToString()).CancelJob == true)
+                    if (TProgressTracker.GetCurrentState(ClientID).CancelJob == true)
                     {
                         DBAccess.GDBAccessObj.RollbackTransaction();
                         return false;
@@ -331,7 +341,7 @@
                     LoadTable(table, ymlParser, Transaction);
                 }
 
-                TProgressTracker.SetCurrentState(DomainManager.GClientID.ToString(),
+                TProgressTracker.SetCurrentState(ClientID,
                     Catalog.GetString("loading sequences"),
                     tables.Count + 5 + 3);
 
@@ -341,7 +351,7 @@
                     LoadSequence(seq, ymlParser, Transaction);
                 }
 
-                TProgressTracker.SetCurrentState(DomainManager.GClientID.ToString(),
+                TProgressTracker.SetCurrentState(ClientID,
                     Catalog.GetString("finish import"),
                     tables.Count + 5 + 4);
 
@@ -350,7 +360,7 @@
                 // reset all cached tables
                 TCacheableTablesManager.GCacheableTablesManager.MarkAllCachedTableNeedsRefreshing();
 
-                TProgressTracker.FinishJob(DomainManager.GClientID.ToString());
+                TProgressTracker.FinishJob(ClientID);
             }
             catch (Exception e)
             {
