--- openpetra.js.before/csharp/ICT/BuildTools/GenerateGlue/CreateServerGlue.cs	2014-08-29 15:39:26.000000000 +0200
+++ openpetra.js/csharp/ICT/BuildTools/GenerateGlue/CreateServerGlue.cs	2014-08-29 15:37:58.000000000 +0200
@@ -5,6 +5,7 @@
 //       timop
 //
 // Copyright 2004-2014 by OM International
+// Copyright 2013-2014 by SolidCharity
 //
 // This file is part of OpenPetra.org.
 //
@@ -158,6 +159,7 @@ public class GenerateServerGlue
 
         snippet.SetCodelet("LOCALVARIABLES", string.Empty);
         string returnCode = string.Empty;
+        int returnCounter = 0;
 
         foreach (ParameterDeclarationExpression p in AParameters)
         {
@@ -199,10 +201,12 @@ public class GenerateServerGlue
                 }
             }
 
+            bool EnumParameter = parametertype.EndsWith("Enum");
             bool BinaryParameter =
                 !((parametertype.StartsWith("System.Int64")) || (parametertype.StartsWith("System.Int32"))
                   || (parametertype.StartsWith("System.Int16"))
-                  || (parametertype.StartsWith("System.String")) || (parametertype.StartsWith("System.Boolean")));
+                  || (parametertype.StartsWith("System.String")) || (parametertype.StartsWith("System.Boolean"))
+                  || EnumParameter);
 
             if (ActualParameters.Length > 0)
             {
@@ -217,8 +221,7 @@ public class GenerateServerGlue
                     ParameterDefinition += ", ";
                 }
 
-                if ((!BinaryParameter)
-                    && (!ArrayParameter))
+                if ((!BinaryParameter) && (!ArrayParameter) && (!EnumParameter))
                 {
                     ParameterDefinition += parametertype + " " + p.ParameterName;
                 }
@@ -238,6 +241,16 @@ public class GenerateServerGlue
                     Environment.NewLine);
             }
 
+            // for string parameters, check if they have been encoded binary due to special characters in the string;
+            // this obviously does not apply to out parameters
+            if ((parametertype == "System.String") && ((ParameterModifiers.Out & p.ParamModifier) == 0))
+            {
+                snippet.AddToCodelet(
+                    "LOCALVARIABLES",
+                    p.ParameterName + " = (string) THttpBinarySerializer.DeserializeObject(" + p.ParameterName + ",\"System.String\");" +
+                    Environment.NewLine);
+            }
+
             if ((ParameterModifiers.Out & p.ParamModifier) != 0)
             {
                 snippet.AddToCodelet("LOCALVARIABLES", parametertype + " " + p.ParameterName + ";" + Environment.NewLine);
@@ -252,6 +265,13 @@ public class GenerateServerGlue
                         Environment.NewLine);
                     ActualParameters += "ref Local" + p.ParameterName;
                 }
+                else if (EnumParameter)
+                {
+                    snippet.AddToCodelet("LOCALVARIABLES", parametertype + " Local" + p.ParameterName + " = " +
+                        " (" + parametertype + ") Enum.Parse(typeof(" + parametertype + "), " + p.ParameterName + ");" +
+                        Environment.NewLine);
+                    ActualParameters += "ref Local" + p.ParameterName;
+                }
                 else
                 {
                     ActualParameters += "ref " + p.ParameterName;
@@ -264,6 +284,10 @@ public class GenerateServerGlue
                 {
                     ActualParameters += "(" + parametertype + ")THttpBinarySerializer.DeserializeObject(" + p.ParameterName + ",\"binary\")";
                 }
+                else if (EnumParameter)
+                {
+                    ActualParameters += " (" + parametertype + ") Enum.Parse(typeof(" + parametertype + "), " + p.ParameterName + ")";
+                }
                 else
                 {
                     ActualParameters += p.ParameterName;
@@ -272,11 +296,21 @@ public class GenerateServerGlue
 
             if (((ParameterModifiers.Ref & p.ParamModifier) > 0) || ((ParameterModifiers.Out & p.ParamModifier) > 0))
             {
+                if (returnCounter == 1)
+                {
+                    returnCode = "\"{ \\\"0\\\": \" + " + returnCode;
+                }
+
+                if (returnCounter > 0)
+                {
+                    returnCode += " + \", \\\"" + returnCounter.ToString() + "\\\": \" + ";
+                }
+
                 returnCode +=
-                    (returnCode.Length > 0 ? "+\",\"+" : string.Empty) +
                     "THttpBinarySerializer.SerializeObjectWithType(" +
                     (((ParameterModifiers.Ref & p.ParamModifier) > 0 && BinaryParameter) ? "Local" : string.Empty) +
                     p.ParameterName + ")";
+                returnCounter++;
             }
         }
 
@@ -303,11 +337,17 @@ public class GenerateServerGlue
                 returntype = returntype.Contains("Decimal") || returntype == "decimal" ? "System.Decimal" : returntype;
             }
 
-            if (returnCode.Length > 0)
+            if (returnCounter > 0)
             {
                 if (returntype != "void")
                 {
-                    returnCode += (returnCode.Length > 0 ? "+\",\"+" : string.Empty) + "THttpBinarySerializer.SerializeObjectWithType(Result)";
+                    if (returnCounter == 1)
+                    {
+                        returnCode = "\"{ \\\"0\\\": \" + " + returnCode;
+                    }
+
+                    returnCode += "+\", \\\"" + returnCounter.ToString() + "\\\": \"+" + "THttpBinarySerializer.SerializeObjectWithType(Result)";
+                    returnCounter++;
                 }
 
                 returntype = "string";
@@ -336,6 +376,11 @@ public class GenerateServerGlue
                 localreturn = "return ";
             }
 
+            if (returnCounter > 1)
+            {
+                returnCode += "+ \"}\"";
+            }
+
             snippet.SetCodelet("RETURN", string.Empty);
 
             if (returnCode.Length > 0)
